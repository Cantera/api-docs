
:html_theme.sidebar_secondary.remove:

.. py:currentmodule:: cantera


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/matlab_experimental/catcomb.m"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_matlab_experimental_catcomb.m>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_matlab_experimental_catcomb.m:

Catalytic combustion of a stagnation flow on a platinum surface
===============================================================


This script solves a catalytic combustion problem. A stagnation flow
is set up, with a gas inlet 10 cm from a platinum surface at 900
K. The lean, premixed methane/air mixture enters at ~ 6 cm/s (0.06
kg/m2/s), and burns catalytically on the platinum surface. Gas-phase
chemistry is included too, and has some effect very near the
surface.

The catalytic combustion mechanism is from Deutschmann et al., 26th
Symp. (Intl.) on Combustion,1996 pp. 1747-1754

.. tags:: Matlab, combustion, catalysis, 1D flow, surface chemistry

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Initialization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 16-22

.. code-block:: Matlab

    help catcomb;

    clear all
    close all

    t0 = cputime; % record the starting time

.. GENERATED FROM PYTHON SOURCE LINES 20-22

Set parameter values
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 25-30

.. code-block:: Matlab

    p = OneAtm; % pressure
    tinlet = 300.0; % inlet temperature
    tsurf = 900.0; % surface temperature
    mdot = 0.06; % kg/m^2/s
    transport = 'mixture-averaged'; % transport model

.. GENERATED FROM PYTHON SOURCE LINES 31-33

Solve first for a hydrogen/air case for use as the initial estimate for
the methane/air case.

.. GENERATED FROM PYTHON SOURCE LINES 35-51

.. code-block:: Matlab

    % composition of the inlet premixed gas for the hydrogen/air case
    comp1 = 'H2:0.05, O2:0.21, N2:0.78, AR:0.01';

    % composition of the inlet premixed gas for the methane/air case
    comp2 = 'CH4:0.095, O2:0.21, N2:0.78, AR:0.01';

    % the initial grid, in meters. The inlet/surface separation is 10 cm.
    initial_grid = [0.0, 0.02, 0.04, 0.06, 0.08, 0.1]; % m

    % numerical parameters
    tol_ss = {1.0e-8 1.0e-14}; % {rtol atol} for steady-state problem
    tol_ts = {1.0e-4 1.0e-9}; % {rtol atol} for time stepping

    loglevel = 1; % amount of diagnostic output (0 to 5)

    refine_grid = 1; % 1 to enable refinement, 0 to disable

.. GENERATED FROM PYTHON SOURCE LINES 49-59

Create the gas object
---------------------


This object will be used to evaluate all thermodynamic, kinetic,
and transport properties

The gas phase will be taken from the definition of phase ``gas`` in
input file ``ptcombust.yaml``, which is a stripped-down version of
GRI-Mech 3.0.

.. GENERATED FROM PYTHON SOURCE LINES 61-63

.. code-block:: Matlab

    gas = Solution('ptcombust.yaml', 'gas', transport);
    gas.TPX = {tinlet, p, comp1};

.. GENERATED FROM PYTHON SOURCE LINES 61-70

Create the interface object
---------------------------


This object will be used to evaluate all surface chemical production
rates. It will be created from the interface definition ``Pt_surf``
in input file ``ptcombust.yaml``, which implements the reaction
mechanism of Deutschmann et al., 1995 for catalytic combustion on
platinum.

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: Matlab

    surf_phase = Interface('ptcombust.yaml', 'Pt_surf', gas);
    surf_phase.TP = {tsurf, surf_phase.P};

.. GENERATED FROM PYTHON SOURCE LINES 75-78

Integrate the coverage equations in time for 1 s, holding the gas
composition fixed to generate a good starting estimate for the
coverages.

.. GENERATED FROM PYTHON SOURCE LINES 80-81

.. code-block:: Matlab

    surf_phase.advanceCoverages(1.0);

.. GENERATED FROM PYTHON SOURCE LINES 82-87

The two objects we just created are independent of the problem
type -- they are useful in zero-D simulations, 1-D simulations,
etc. Now we turn to creating the objects that are specifically
for 1-D simulations. These will be 'stacked' together to create
the complete simulation.

.. GENERATED FROM PYTHON SOURCE LINES 86-93

Create the flow object
----------------------


The flow object is responsible for evaluating the 1D governing
equations for the flow. We will initialize it with the gas
object, and assign it the name ``flow``.

.. GENERATED FROM PYTHON SOURCE LINES 95-102

.. code-block:: Matlab

    flow = AxisymmetricFlow(gas, 'flow');

    % set some parameters for the flow
    flow.P = p;
    flow.setupGrid(initial_grid);
    flow.setSteadyTolerances('default', tol_ss{:});
    flow.setTransientTolerances('default', tol_ts{:});

.. GENERATED FROM PYTHON SOURCE LINES 100-107

Create the inlet
----------------


The temperature, mass flux, and composition (relative molar) may be
specified. This object provides the inlet boundary conditions for
the flow equations.

.. GENERATED FROM PYTHON SOURCE LINES 109-115

.. code-block:: Matlab

    inlt = Inlet(gas, 'inlet');

    % set the inlet parameters. Start with comp1 (hydrogen/air)
    inlt.T = tinlet;
    inlt.massFlux = mdot;
    inlt.setMoleFractions(comp1);

.. GENERATED FROM PYTHON SOURCE LINES 113-122

Create the surface
------------------


This object provides the surface boundary conditions for the flow
equations. By supplying object ``surface_phase`` as an argument, the
coverage equations for its surface species will be added to the
equation set, and used to compute the surface production rates of
the gas-phase species.

.. GENERATED FROM PYTHON SOURCE LINES 124-126

.. code-block:: Matlab

    surf = ReactingSurface(surf_phase, 'surface');
    surf.T = tsurf;

.. GENERATED FROM PYTHON SOURCE LINES 124-130

Create the stack
----------------


Once the component parts have been created, they can be assembled
to create the 1D simulation.

.. GENERATED FROM PYTHON SOURCE LINES 132-149

.. code-block:: Matlab

    stack = Sim1D({inlt, flow, surf});

    % set the initial profiles.
    stack.setProfile(2, {'velocity', 'spread_rate', 'T'}, ...
                    [0.0, 1.0 % z/zmax
                     0.06, 0.0 % u
                     0.0, 0.0 % V
                     tinlet, tsurf]); % T
    names = gas.speciesNames;

    for k = 1:gas.nSpecies
        y = inlt.massFraction(k);
        stack.setProfile(2, names{k}, [0, 1; y, y]);
    end

    stack.setTimeStep(1.0e-5, [1, 3, 6, 12]);
    stack.setMaxJacAge(4, 5);

.. GENERATED FROM PYTHON SOURCE LINES 147-151

Solution
--------

Start with the energy equation on

.. GENERATED FROM PYTHON SOURCE LINES 152-153

.. code-block:: Matlab

    flow.energyEnabled = true;

.. GENERATED FROM PYTHON SOURCE LINES 154-156

Disable the surface coverage equations, and turn off all gas and
surface chemistry

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Matlab

    surf.coverageEnabled = false;
    surf_phase.setMultiplier(0.0);
    gas.setMultiplier(0.0);

.. GENERATED FROM PYTHON SOURCE LINES 162-163

Solve the problem, refining the grid if needed

.. GENERATED FROM PYTHON SOURCE LINES 164-165

.. code-block:: Matlab

    stack.solve(1, refine_grid);

.. GENERATED FROM PYTHON SOURCE LINES 166-168

Now turn on the surface coverage equations, and turn the
chemistry on slowly

.. GENERATED FROM PYTHON SOURCE LINES 170-178

.. code-block:: Matlab

    surf.coverageEnabled = true;

    for iter = 1:6
        mult = 10.0^(iter - 6);
        surf_phase.setMultiplier(mult);
        gas.setMultiplier(mult);
        stack.solve(1, refine_grid);
    end

.. GENERATED FROM PYTHON SOURCE LINES 179-181

At this point, we should have the solution for the hydrogen/air
problem. Now switch the inlet to the methane/air composition.

.. GENERATED FROM PYTHON SOURCE LINES 182-183

.. code-block:: Matlab

    inlt.setMoleFractions(comp2);

.. GENERATED FROM PYTHON SOURCE LINES 184-185

Set more stringent grid refinement criteria

.. GENERATED FROM PYTHON SOURCE LINES 186-187

.. code-block:: Matlab

    stack.setRefineCriteria(2, 100.0, 0.15, 0.2);

.. GENERATED FROM PYTHON SOURCE LINES 188-189

Solve the problem for the final time

.. GENERATED FROM PYTHON SOURCE LINES 190-191

.. code-block:: Matlab

    stack.solve(loglevel, refine_grid);

.. GENERATED FROM PYTHON SOURCE LINES 189-191

Show statistics
---------------

.. GENERATED FROM PYTHON SOURCE LINES 194-198

.. code-block:: Matlab

    stack.writeStats;
    elapsed = cputime - t0;
    e = sprintf('Elapsed CPU time: %10.4g', elapsed);
    disp(e);

.. GENERATED FROM PYTHON SOURCE LINES 196-198

Make plots
----------

.. GENERATED FROM PYTHON SOURCE LINES 200-236

.. code-block:: Matlab

    clf;

    subplot(3, 3, 1);
    plotSolution(stack, 'flow', 'T');
    title('Temperature [K]');

    subplot(3, 3, 2);
    plotSolution(stack, 'flow', 'velocity');
    title('Axial Velocity [m/s]');

    subplot(3, 3, 3);
    plotSolution(stack, 'flow', 'spread_rate');
    title('Radial Velocity / Radius [1/s]');

    subplot(3, 3, 4);
    plotSolution(stack, 'flow', 'CH4');
    title('CH4 Mass Fraction');

    subplot(3, 3, 5);
    plotSolution(stack, 'flow', 'O2');
    title('O2 Mass Fraction');

    subplot(3, 3, 6);
    plotSolution(stack, 'flow', 'CO');
    title('CO Mass Fraction');

    subplot(3, 3, 7);
    plotSolution(stack, 'flow', 'CO2');
    title('CO2 Mass Fraction');

    subplot(3, 3, 8);
    plotSolution(stack, 'flow', 'H2O');
    title('H2O Mass Fraction');

    subplot(3, 3, 9);
    plotSolution(stack, 'flow', 'H2');
    title('H2 Mass Fraction');

.. _sphx_glr_download_examples_matlab_experimental_catcomb.m:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Matlab source code: catcomb.m <catcomb.m>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: catcomb.zip <catcomb.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
