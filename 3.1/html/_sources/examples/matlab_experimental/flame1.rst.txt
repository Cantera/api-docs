
:html_theme.sidebar_secondary.remove:

.. py:currentmodule:: cantera


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/matlab_experimental/flame1.m"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_matlab_experimental_flame1.m>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_matlab_experimental_flame1.m:

Burner-stabilized flat flame
============================


This script simulates a burner-stablized lean hydrogen-oxygen flame
at low pressure.

.. tags:: Matlab, combustion, 1D flow, burner-stabilized flame, plotting

.. GENERATED FROM PYTHON SOURCE LINES 4-6

Initialization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 9-16

.. code-block:: Matlab

    clear all
    close all

    tic
    help flame1

    t0 = cputime; % record the starting time

.. GENERATED FROM PYTHON SOURCE LINES 14-16

Set parameter values
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 19-38

.. code-block:: Matlab

    p = 0.05 * OneAtm; % pressure
    tburner = 373.0; % burner temperature
    mdot = 0.06; % kg/m^2/s

    rxnmech = 'h2o2.yaml'; % reaction mechanism file
    comp = 'H2:1.8, O2:1, AR:7'; % premixed gas composition

    initial_grid = [0.0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.15, 0.2, 0.4, ...
                    0.49, 0.5]; % m

    tol_ss = {1.0e-5, 1.0e-13}; % {rtol atol} for steady-state problem
    tol_ts = {1.0e-4, 1.0e-9}; % {rtol atol} for time stepping

    loglevel = 1; % amount of diagnostic output (0
    % to 5)

    refine_grid = 1; % 1 to enable refinement, 0 to
    % disable
    max_jacobian_age = [5, 10];

.. GENERATED FROM PYTHON SOURCE LINES 36-42

Create the gas object
---------------------


This object will be used to evaluate all thermodynamic, kinetic,
and transport properties

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: Matlab

    gas = Solution(rxnmech, 'ohmech', 'mixture-averaged');

    % set its state to that of the unburned gas at the burner
    gas.TPX = {tburner, p, comp};

.. GENERATED FROM PYTHON SOURCE LINES 46-48

Create the flow object
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: Matlab

    f = AxisymmetricFlow(gas, 'flow');
    f.P = p;
    f.setupGrid(initial_grid);
    f.setSteadyTolerances('default', tol_ss{:});
    f.setTransientTolerances('default', tol_ts{:});

.. GENERATED FROM PYTHON SOURCE LINES 54-60

Create the burner
-----------------


 The burner is an ``Inlet`` object. The temperature, mass flux,
 and composition (relative molar) may be specified.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: Matlab

    burner = Inlet(gas, 'burner');
    burner.T = tburner;
    burner.massFlux = mdot;
    burner.setMoleFractions(comp);

.. GENERATED FROM PYTHON SOURCE LINES 63-71

Create the outlet
-----------------


 The type of flame is determined by the object that terminates
 the domain. An ``Outlet`` object imposes zero gradient boundary
 conditions for the temperature and mass fractions, and zero
 radial velocity and radial pressure gradient.

.. GENERATED FROM PYTHON SOURCE LINES 73-74

.. code-block:: Matlab

    s = Outlet(gas, 'out');

.. GENERATED FROM PYTHON SOURCE LINES 72-78

Create the flame object
-----------------------


Once the component parts have been created, they can be assembled
to create the flame object (see :doc:`flame.m <flame>`).

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: Matlab

    fl = flame(gas, burner, f, s);
    fl.setMaxJacAge(max_jacobian_age(1), max_jacobian_age(2));

.. GENERATED FROM PYTHON SOURCE LINES 82-84

if the starting solution is to be read from a previously-saved
solution, uncomment this line and edit the file name and solution id.

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: Matlab

    %restore(fl,'h2flame2.yaml', 'energy')

    fl.solve(loglevel, refine_grid);

.. GENERATED FROM PYTHON SOURCE LINES 87-94

Enable the energy equation
--------------------------


 The energy equation will now be solved to compute the
 temperature profile. We also tighten the grid refinement
 criteria to get an accurate final solution.

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: Matlab

    f.energyEnabled = true;
    fl.setRefineCriteria(2, 200.0, 0.05, 0.1);
    fl.solve(1, 1);

.. GENERATED FROM PYTHON SOURCE LINES 97-99

Show statistics
---------------

.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: Matlab

    fl.writeStats;
    elapsed = cputime - t0;
    e = sprintf('Elapsed CPU time: %10.4g', elapsed);
    disp(e);

.. GENERATED FROM PYTHON SOURCE LINES 104-106

Make plots
----------

.. GENERATED FROM PYTHON SOURCE LINES 108-122

.. code-block:: Matlab

    clf;
    subplot(2, 2, 1);
    plotSolution(fl, 'flow', 'T');
    title('Temperature [K]');
    subplot(2, 2, 2);
    plotSolution(fl, 'flow', 'velocity');
    title('Axial Velocity [m/s]');
    subplot(2, 2, 3);
    plotSolution(fl, 'flow', 'H2O');
    title('H2O Mass Fraction');
    subplot(2, 2, 4);
    plotSolution(fl, 'flow', 'O2');
    title('O2 Mass Fraction');

    toc

.. _sphx_glr_download_examples_matlab_experimental_flame1.m:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Matlab source code: flame1.m <flame1.m>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: flame1.zip <flame1.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
