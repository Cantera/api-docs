
:html_theme.sidebar_secondary.remove:

.. py:currentmodule:: cantera


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/matlab_experimental/ignite.m"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_matlab_experimental_ignite.m>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_matlab_experimental_ignite.m:

Adiabatic, constant pressure reactor
====================================


This example solves the same problem as :doc:`reactor1.m <reactor1>`, but does it
using one of MATLAB's ODE integrators, rather than using the Cantera Reactor
class. See :doc:`reactor_ode.m <reactor_ode>` for the implementation of the
governing equations.

.. tags:: Matlab, combustion, reactor network, ignition delay, plotting

.. GENERATED FROM PYTHON SOURCE LINES 0-30

.. code-block:: Matlab

    function plotdata = ignite(g)
        clear all
        close all

        tic
        help ignite

        if nargin == 1
            gas = g;
        else
            gas = Solution('gri30.yaml', 'gri30');
        end

        % set the initial conditions

        gas.TPX = {1001.0, OneAtm, 'H2:2,O2:1,N2:4'};
        gas.basis = 'mass';
        y0 = [gas.U
              1.0 / gas.D
              gas.Y'];

        time_interval = [0 0.001];
        options = odeset('RelTol', 1.e-5, 'AbsTol', 1.e-12, 'Stats', 'on');

        t0 = cputime;
        out = ode15s(@reactor_ode, time_interval, y0, options, gas, ...
                    @vdot, @area, @heatflux);
        disp(['CPU time = ' num2str(cputime - t0)]);

        plotdata = output(out, gas);

.. GENERATED FROM PYTHON SOURCE LINES 37-51

Time-varying boundary conditions
--------------------------------


The functions below may be defined arbitrarily to set the reactor
boundary conditions - the rate of change of volume, the heat
flux, and the area.

Rate of change of volume. Any arbitrary function may be implemented.

Input arguments:
   :t:      time
   :vol:    volume
   :gas:    ideal gas object

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Matlab
   :dedent: 1

        function v = vdot(t, vol, gas)
            %v = 0.0;                                 %uncomment for constant volume
            v = 1.e11 * (gas.P - 101325.0); % holds pressure very
            % close to 1 atm
        end

.. GENERATED FROM PYTHON SOURCE LINES 58-59

heat flux (W/m^2).

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Matlab
   :dedent: 1

        function q = heatflux(t, gas)
            q = 0.0; % adiabatic
        end

.. GENERATED FROM PYTHON SOURCE LINES 64-65

surface area (m^2). Used only to compute heat transfer.

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: Matlab
   :dedent: 1

        function a = area(t, vol)
            a = 1.0;
        end

.. GENERATED FROM PYTHON SOURCE LINES 70-74

Since the solution variables used by the ``reactor`` function are
not necessarily those desired for output, this function is called
after the integration is complete to generate the desired
outputs.

.. GENERATED FROM PYTHON SOURCE LINES 75-115

.. code-block:: Matlab

        function pv = output(s, gas)
            times = s.x;
            soln = s.y;
            [~, n] = size(times);
            pv = zeros(gas.nSpecies + 4, n);

            gas.TP = {1001.0, OneAtm};

            for j = 1:n
                ss = soln(:, j);
                y = ss(3:end);
                mass = sum(y);
                u_mass = ss(1) / mass;
                v_mass = ss(2) / mass;
                gas.Y = y;
                gas.UV = {u_mass, v_mass};

                pv(1, j) = times(j);
                pv(2, j) = gas.T;
                pv(3, j) = gas.D;
                pv(4, j) = gas.P;
                pv(5:end, j) = y;
            end

            % plot the temperature and OH mass fractions.
            figure(1);
            plot(pv(1, :), pv(2, :));
            xlabel('time');
            ylabel('Temperature');
            title(['Final T = ' num2str(pv(2, end)) ' K']);

            figure(2);
            ioh = gas.speciesIndex('OH');
            plot(pv(1, :), pv(4 + ioh, :));
            xlabel('time');
            ylabel('Mass Fraction');
            title('OH Mass Fraction');
        end

        toc
    end

.. _sphx_glr_download_examples_matlab_experimental_ignite.m:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Matlab source code: ignite.m <ignite.m>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: ignite.zip <ignite.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
