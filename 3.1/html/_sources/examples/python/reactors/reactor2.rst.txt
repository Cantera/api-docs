
:html_theme.sidebar_secondary.remove:

.. py:currentmodule:: cantera


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/python/reactors/reactor2.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_python_reactors_reactor2.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_python_reactors_reactor2.py:


Reactors with walls and heat transfer
=====================================

Two reactors connected with a piston, with heat loss to the environment

This script simulates the following situation. A closed cylinder with volume 2
m³ is divided into two equal parts by a massless piston that moves with speed
proportional to the pressure difference between the two sides. It is
initially held in place in the middle. One side is filled with 1000 K argon at
20 atm, and the other with a combustible 500 K methane/air mixture at 0.2 atm
(:math:`\phi = 1.1`). At :math:`t = 0`, the piston is released and begins to move due
to the large pressure difference, compressing and heating the methane/air mixture,
which eventually explodes. At the same time, the argon cools as it expands.
The piston allows heat transfer between the reactors and some heat is lost
through the outer cylinder walls to the environment.

Note that this simulation, being zero-dimensional, takes no account of shock
wave propagation. It is somewhat artificial, but nevertheless instructive.

Requires: cantera >= 2.5.0, matplotlib >= 2.0, pandas

.. tags:: combustion, reactor network, plotting

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: Python


    import pandas as pd
    import matplotlib.pyplot as plt
    plt.rcParams['figure.constrained_layout.use'] = True

    import cantera as ct








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Set up the simulation
---------------------

First create each gas needed, and a reactor or reservoir for each one.

.. GENERATED FROM PYTHON SOURCE LINES 37-69

.. code-block:: Python


    # create an argon gas object and set its state
    ar = ct.Solution('air.yaml')
    ar.TPX = 1000.0, 20.0 * ct.one_atm, "AR:1"

    # create a reactor to represent the side of the cylinder filled with argon
    r1 = ct.IdealGasReactor(ar, name="Argon partition")

    # create a reservoir for the environment, and fill it with air.
    env = ct.Reservoir(ct.Solution('air.yaml'), name="Environment")

    # use GRI-Mech 3.0 for the methane/air mixture, and set its initial state
    gas = ct.Solution('gri30.yaml')
    gas.TP = 500.0, 0.2 * ct.one_atm
    gas.set_equivalence_ratio(1.1, 'CH4:1.0', 'O2:1, N2:3.76')

    # create a reactor for the methane/air side
    r2 = ct.IdealGasReactor(gas, name="Reacting partition")

    # Now couple the reactors by defining common walls that may move (a piston) or
    # conduct heat

    # add a flexible wall (a piston) between r2 and r1
    w = ct.Wall(r2, r1, A=1.0, K=0.5e-4, U=100.0, name="Piston")

    # heat loss to the environment. Heat loss always occur through walls, so we
    # create a wall separating r2 from the environment, give it a non-zero area,
    # and specify the overall heat transfer coefficient through the wall.
    w2 = ct.Wall(r2, env, A=1.0, U=500.0, name="External Wall")

    sim = ct.ReactorNet([r1, r2])








.. GENERATED FROM PYTHON SOURCE LINES 70-72

Show the initial state
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: Python

    sim.draw(print_state=True, species="X")




.. image-sg:: /examples/python/reactors/images/sphx_glr_reactor2_001.svg
   :alt: reactor2
   :srcset: /examples/python/reactors/images/sphx_glr_reactor2_001.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-76

Now the problem is set up, and we're ready to solve it.

.. GENERATED FROM PYTHON SOURCE LINES 76-88

.. code-block:: Python


    time = 0.0
    n_steps = 300
    states1 = ct.SolutionArray(ar, extra=['t', 'V'])
    states2 = ct.SolutionArray(gas, extra=['t', 'V'])

    for n in range(n_steps):
        time += 4.e-4
        sim.advance(time)
        states1.append(r1.thermo.state, t=time, V=r1.volume)
        states2.append(r2.thermo.state, t=time, V=r2.volume)








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Combine the results and save for later processing or plotting

.. GENERATED FROM PYTHON SOURCE LINES 90-102

.. code-block:: Python

    df = pd.DataFrame.from_dict({
        'time (s)': states1.t,
        'T1 (K)': states1.T,
        'P1 (bar)': states1.P / 1e5,
        'V1 (m3)': states1.V,
        'T2 (K)': states2.T,
        'P2 (bar)': states2.P / 1e5,
        'V2 (m3)': states2.V,
    })
    df.to_csv("piston.csv")
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time (s)</th>
          <th>T1 (K)</th>
          <th>P1 (bar)</th>
          <th>V1 (m3)</th>
          <th>T2 (K)</th>
          <th>P2 (bar)</th>
          <th>V2 (m3)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.0004</td>
          <td>974.915404</td>
          <td>19.018144</td>
          <td>1.038832</td>
          <td>506.904245</td>
          <td>0.213749</td>
          <td>0.961168</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.0008</td>
          <td>952.717786</td>
          <td>17.954178</td>
          <td>1.075339</td>
          <td>513.699629</td>
          <td>0.225166</td>
          <td>0.924661</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.0012</td>
          <td>932.862197</td>
          <td>17.033443</td>
          <td>1.109843</td>
          <td>520.417757</td>
          <td>0.236953</td>
          <td>0.890157</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.0016</td>
          <td>914.941012</td>
          <td>16.227259</td>
          <td>1.142601</td>
          <td>527.084726</td>
          <td>0.249158</td>
          <td>0.857399</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.0020</td>
          <td>898.641990</td>
          <td>15.514320</td>
          <td>1.173817</td>
          <td>533.722660</td>
          <td>0.261828</td>
          <td>0.826183</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>295</th>
          <td>0.1184</td>
          <td>663.499539</td>
          <td>7.202775</td>
          <td>1.866755</td>
          <td>2303.353984</td>
          <td>7.147006</td>
          <td>0.133245</td>
        </tr>
        <tr>
          <th>296</th>
          <td>0.1188</td>
          <td>663.494672</td>
          <td>7.202292</td>
          <td>1.866867</td>
          <td>2301.302242</td>
          <td>7.146505</td>
          <td>0.133133</td>
        </tr>
        <tr>
          <th>297</th>
          <td>0.1192</td>
          <td>663.489772</td>
          <td>7.201808</td>
          <td>1.866978</td>
          <td>2299.249665</td>
          <td>7.146005</td>
          <td>0.133022</td>
        </tr>
        <tr>
          <th>298</th>
          <td>0.1196</td>
          <td>663.484838</td>
          <td>7.201324</td>
          <td>1.867090</td>
          <td>2297.196284</td>
          <td>7.145504</td>
          <td>0.132910</td>
        </tr>
        <tr>
          <th>299</th>
          <td>0.1200</td>
          <td>663.479871</td>
          <td>7.200840</td>
          <td>1.867202</td>
          <td>2295.142132</td>
          <td>7.145004</td>
          <td>0.132798</td>
        </tr>
      </tbody>
    </table>
    <p>300 rows × 7 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 103-105

Plot results
------------

.. GENERATED FROM PYTHON SOURCE LINES 105-118

.. code-block:: Python

    fig, ax = plt.subplots(3, 1, figsize=(5,8))

    ax[0].plot(states1.t, states1.T, 'g-', label='Argon partition')
    ax[0].plot(states2.t, states2.T, 'b-', label='Reacting partition')
    ax[0].set(xlabel='Time (s)', ylabel='Temperature (K)')
    ax[0].legend()

    ax[1].plot(states1.t, states1.P / 1e5, 'g-', states2.t, states2.P / 1e5, 'b-')
    ax[1].set(xlabel='Time (s)', ylabel='Pressure (Bar)')

    ax[2].plot(states1.t, states1.V, 'g-', states2.t, states2.V, 'b-')
    _ = ax[2].set(xlabel='Time (s)', ylabel='Volume (m$^3$)')




.. image-sg:: /examples/python/reactors/images/sphx_glr_reactor2_002.png
   :alt: reactor2
   :srcset: /examples/python/reactors/images/sphx_glr_reactor2_002.png, /examples/python/reactors/images/sphx_glr_reactor2_002_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 119-121

Show the final state
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: Python

    try:
        diagram = sim.draw(print_state=True, species="X")
    except ImportError as err:
        print(f"Unable to show network structure:\n{err}")



.. image-sg:: /examples/python/reactors/images/sphx_glr_reactor2_003.svg
   :alt: reactor2
   :srcset: /examples/python/reactors/images/sphx_glr_reactor2_003.svg
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.690 seconds)


.. _sphx_glr_download_examples_python_reactors_reactor2.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reactor2.ipynb <reactor2.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reactor2.py <reactor2.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: reactor2.zip <reactor2.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
