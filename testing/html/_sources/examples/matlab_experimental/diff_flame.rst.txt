
:html_theme.sidebar_secondary.remove:

.. py:currentmodule:: cantera


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/matlab_experimental/diff_flame.m"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_matlab_experimental_diff_flame.m>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_matlab_experimental_diff_flame.m:

Opposed-flow diffusion flame
============================


This example uses the ``CounterFlowDiffusionFlame`` function to solve an
opposed-flow diffusion flame for Ethane in Air. This example is the same
as the :doc:`diffusion_flame.py <../python/onedim/diffusion_flame>`
example without radiation.

.. tags:: Matlab, combustion, 1D flow, diffusion flame, plotting

.. GENERATED FROM PYTHON SOURCE LINES 6-8

Initialization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: Matlab

    clear all
    close all

    tic % total running time of the script
    help diff_flame

    runtime = cputime; % Record the starting time

.. GENERATED FROM PYTHON SOURCE LINES 16-18

Parameter values of inlet streams
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: Matlab

    p = OneAtm; % Pressure
    tin = 300.0; % Inlet temperature
    mdot_o = 0.72; % Air mass flux, kg/m^2/s
    mdot_f = 0.24; % Fuel mass flux, kg/m^2/s
    transport = 'mixture-averaged'; % Transport model
    % NOTE: Transport model needed if mechanism file does not have transport
    % properties.

.. GENERATED FROM PYTHON SOURCE LINES 26-28

Set-up initial grid, loglevel, tolerances. Enable/Disable grid refinement
-------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: Matlab

    initial_grid = 0.02 * [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]; % Units: m
    tol_ss = {1.0e-5, 1.0e-9}; % {rtol atol} for steady-state problem
    tol_ts = {1.0e-3, 1.0e-9}; % {rtol atol} for time stepping
    loglevel = 1; % Amount of diagnostic output (0 to 5)
    refine_grid = 1; % 1 to enable refinement, 0 to disable

.. GENERATED FROM PYTHON SOURCE LINES 34-40

Create the gas objects for the fuel and oxidizer streams
--------------------------------------------------------


These objects will be used to evaluate all thermodynamic, kinetic, and
transport properties.

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: Matlab

    fuel = Solution('gri30.yaml', 'gri30', transport);
    ox = Solution('gri30.yaml', 'gri30', transport);
    oxcomp = 'O2:0.21, N2:0.78'; % Air composition
    fuelcomp = 'C2H6:1'; % Fuel composition
    % Set each gas mixture state with the corresponding composition.
    fuel.TPX = {tin, p, fuelcomp};
    ox.TPX = {tin, p, oxcomp};

.. GENERATED FROM PYTHON SOURCE LINES 47-55

Set-up the flow object
----------------------


For this problem, the ``AxisymmetricFlow`` model is needed. Set the state of
the flow as the fuel gas object. This is arbitrary and is only used to
initialize the flow object. Set the grid to the initial grid defined
prior, same for the tolerances.

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: Matlab

    f = AxisymmetricFlow(fuel, 'flow');
    f.P = p;
    f.setupGrid(initial_grid);
    f.setSteadyTolerances('default', tol_ss{:});
    f.setTransientTolerances('default', tol_ts{:});

.. GENERATED FROM PYTHON SOURCE LINES 60-65

Create the fuel and oxidizer inlet steams
-----------------------------------------


Specify the temperature, mass flux, and composition correspondingly.

.. GENERATED FROM PYTHON SOURCE LINES 67-78

.. code-block:: Matlab

    % Set the oxidizer inlet.
    inlet_o = Inlet(ox, 'air_inlet');
    inlet_o.T = tin;
    inlet_o.massFlux = mdot_o;
    inlet_o.setMoleFractions(oxcomp);

    % Set the fuel inlet.
    inlet_f = Inlet(fuel, 'fuel_inlet');
    inlet_f.T = tin;
    inlet_f.massFlux = mdot_f;
    inlet_f.setMoleFractions(fuelcomp);

.. GENERATED FROM PYTHON SOURCE LINES 76-86

Create the flame object
-----------------------


Once the inlets have been created, they can be assembled
to create the flame object. Function ``CounterFlorDiffusionFlame``
(in ``Cantera/1D``) sets up the initial guess for the solution using a
Burke-Schumann flame. The input parameters are: fuel inlet object, flow
object, oxidizer inlet object, fuel gas object, oxidizer gas object, and
the name of the oxidizer species as in character format.

.. GENERATED FROM PYTHON SOURCE LINES 88-89

.. code-block:: Matlab

    fl = CounterFlowDiffusionFlame(inlet_f, f, inlet_o, fuel, ox, 'O2');

.. GENERATED FROM PYTHON SOURCE LINES 87-93

Solve with fixed temperature profile
------------------------------------


Grid refinement is turned off for this process in this example.
To turn grid refinement on, change 0 to 1 for last input is solve function.

.. GENERATED FROM PYTHON SOURCE LINES 95-96

.. code-block:: Matlab

    fl.solve(loglevel, 0);

.. GENERATED FROM PYTHON SOURCE LINES 94-103

Enable the energy equation
--------------------------


The energy equation will now be solved to compute the temperature profile.
We also tighten the grid refinement criteria to get an accurate final
solution. The explanation of the ``setRefineCriteria`` function is located
on cantera.org in the Matlab User's Guide and can be accessed by
``help setRefineCriteria``.

.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: Matlab

    f.energyEnabled = true;
    fl.setRefineCriteria(2, 200.0, 0.1, 0.2);
    fl.solve(loglevel, refine_grid);

.. GENERATED FROM PYTHON SOURCE LINES 106-108

Show statistics of solution and elapsed time
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: Matlab

    fl.writeStats;
    elapsed = cputime - runtime;
    e = sprintf('Elapsed CPU time: %10.4g', elapsed);
    disp(e);

.. GENERATED FROM PYTHON SOURCE LINES 113-118

Plot results
------------

Make a single plot showing temperature and mass fraction of select
species along axial distance from fuel inlet to air inlet.

.. GENERATED FROM PYTHON SOURCE LINES 119-143

.. code-block:: Matlab

    z = fl.grid('flow'); % Get grid points of flow
    spec = fuel.speciesNames; % Get species names in gas
    T = fl.getSolution('flow', 'T'); % Get temperature solution

    for i = 1:length(spec)
        % Get mass fraction of all species from solution
        y(i, :) = fl.getSolution('flow', spec{i});
    end

    j = fuel.speciesIndex('O2'); % Get index of O2 in gas object
    k = fuel.speciesIndex('H2O'); % Get index of H2O in gas object
    l = fuel.speciesIndex('C2H6'); % Get index of C2H6 in gas object
    m = fuel.speciesIndex('CO2'); % Get index of CO2 in gas object

    clf;
    yyaxis left
    plot(z, T)
    xlabel('z (m)');
    ylabel('Temperature (K)');
    yyaxis right
    plot(z, y(j, :), 'r', z, y(k, :), 'g', z, y(l, :), 'm', z, y(m, :), 'b');
    ylabel('Mass Fraction');
    legend('T', 'O2', 'H2O', 'C2H6', 'CO2');

    toc

.. _sphx_glr_download_examples_matlab_experimental_diff_flame.m:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Matlab source code: diff_flame.m <diff_flame.m>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: diff_flame.zip <diff_flame.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
