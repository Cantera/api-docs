
:html_theme.sidebar_secondary.remove:

.. py:currentmodule:: cantera


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/matlab_experimental/flame2.m"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_matlab_experimental_flame2.m>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_matlab_experimental_flame2.m:

Axisymmetric stagnation-point non-premixed flame
================================================


This script simulates a stagnation-point ethane-air flame.

.. tags:: Matlab, combustion, 1D flow, strained flame, diffusion flame, plotting

.. GENERATED FROM PYTHON SOURCE LINES 3-5

Initialization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: Matlab

    clear all
    close all

    tic
    help flame2

    t0 = cputime; % record the starting time

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Set parameter values
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 18-35

.. code-block:: Matlab

    p = OneAtm; % pressure
    tin = 300.0; % inlet temperature
    mdot_o = 0.72; % air, kg/m^2/s
    mdot_f = 0.24; % fuel, kg/m^2/s

    rxnmech = 'gri30.yaml'; % reaction mechanism file
    comp1 = 'O2:0.21, N2:0.78, AR:0.01'; % air composition
    comp2 = 'C2H6:1'; % fuel composition

    initial_grid = 0.02 * [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]; % m

    tol_ss = {1.0e-5, 1.0e-13}; % {rtol atol} for steady-state problem
    tol_ts = {1.0e-4, 1.0e-13}; % {rtol atol} for time stepping

    loglevel = 1; % amount of diagnostic output (0 to 5)

    refine_grid = 1; % 1 to enable refinement, 0 to disable

.. GENERATED FROM PYTHON SOURCE LINES 33-39

Create the gas object
---------------------


This object will be used to evaluate all thermodynamic, kinetic,
and transport properties

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Matlab

    gas = Solution(rxnmech, 'gri30', 'mixture-averaged');

    % set its state to that of the  fuel (arbitrary)
    gas.TPX = {tin, p, comp2};

.. GENERATED FROM PYTHON SOURCE LINES 43-45

Create the flow object
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: Matlab

    f = AxisymmetricFlow(gas, 'flow');
    f.P = p;
    f.setupGrid(initial_grid);
    f.setSteadyTolerances('default', tol_ss{:});
    f.setTransientTolerances('default', tol_ts{:});

.. GENERATED FROM PYTHON SOURCE LINES 51-57

Create the air inlet
--------------------


The temperature, mass flux, and composition (relative molar) may be
specified.

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: Matlab

    inlet_o = Inlet(gas, 'air_inlet');
    inlet_o.T = tin;
    inlet_o.massFlux = mdot_o;
    inlet_o.setMoleFractions(comp1);

.. GENERATED FROM PYTHON SOURCE LINES 61-63

Create the fuel inlet
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: Matlab

    inlet_f = Inlet(gas, 'fuel_inlet');
    inlet_f.T = tin;
    inlet_f.massFlux = mdot_f;
    inlet_f.setMoleFractions(comp2);

.. GENERATED FROM PYTHON SOURCE LINES 68-74

Create the flame object
-----------------------


Once the component parts have been created, they can be assembled
to create the flame object.

.. GENERATED FROM PYTHON SOURCE LINES 76-77

.. code-block:: Matlab

    fl = flame(gas, inlet_o, f, inlet_f);

.. GENERATED FROM PYTHON SOURCE LINES 78-80

if the starting solution is to be read from a previously-saved
solution, uncomment this line and edit the file name and solution id.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: Matlab

    %restore(fl,'h2flame2.yaml', 'energy')

    % Solve with fixed temperature profile first
    fl.solve(loglevel, refine_grid);

.. GENERATED FROM PYTHON SOURCE LINES 84-90

Enable the energy equation
--------------------------


The energy equation will now be solved to compute the temperature profile. We also
tighten the grid refinement criteria to get an accurate final solution.

.. GENERATED FROM PYTHON SOURCE LINES 92-95

.. code-block:: Matlab

    f.energyEnabled = true;
    fl.setRefineCriteria(2, 200.0, 0.1, 0.1);
    fl.solve(loglevel, refine_grid);

.. GENERATED FROM PYTHON SOURCE LINES 93-95

Show statistics
---------------

.. GENERATED FROM PYTHON SOURCE LINES 98-102

.. code-block:: Matlab

    fl.writeStats;
    elapsed = cputime - t0;
    e = sprintf('Elapsed CPU time: %10.4g', elapsed);
    disp(e);

.. GENERATED FROM PYTHON SOURCE LINES 100-102

Make plots
----------

.. GENERATED FROM PYTHON SOURCE LINES 104-124

.. code-block:: Matlab

    figure(1);
    subplot(2, 3, 1);
    plotSolution(fl, 'flow', 'T');
    title('Temperature [K]');
    subplot(2, 3, 2);
    plotSolution(fl, 'flow', 'C2H6');
    title('C2H6 Mass Fraction');
    subplot(2, 3, 3);
    plotSolution(fl, 'flow', 'O2');
    title('O2 Mass Fraction');
    subplot(2, 3, 4);
    plotSolution(fl, 'flow', 'CH');
    title('CH Mass Fraction');
    subplot(2, 3, 5);
    plotSolution(fl, 'flow', 'spread_rate');
    title('Radial Velocity / Radius [s^-1]');
    subplot(2, 3, 6);
    plotSolution(fl, 'flow', 'velocity');
    title('Axial Velocity [m/s]');

    toc

.. _sphx_glr_download_examples_matlab_experimental_flame2.m:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Matlab source code: flame2.m <flame2.m>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: flame2.zip <flame2.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
